import streamlit as st
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.util import ngrams
from nltk.lm.preprocessing import pad_sequence
from nltk.probability import FreqDist
import plotly.express as px
from collections import Counter
from nltk.corpus import stopwords
import string
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer

# Initialize TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english')

nltk.download('punkt')
nltk.download('stopwords')

# Load GPT-2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

def calculate_perplexity(text):
    encoded_input = tokenizer.encode(text, add_special_tokens=False, return_tensors='pt')
    max_length = model.config.n_positions
    stride = 512
    nlls = []
    for i in range(0, encoded_input.size(1), stride):
        begin_loc = max(i + stride - max_length, 0)
        end_loc = min(i + stride, encoded_input.size(1))
        trg_len = end_loc - i
        input_ids = encoded_input[:, begin_loc:end_loc]
        target_ids = input_ids.clone()
        target_ids[:, :-trg_len] = -100

        with torch.no_grad():
            outputs = model(input_ids, labels=target_ids)
            neg_log_likelihood = outputs.loss * trg_len

        nlls.append(neg_log_likelihood)

    perplexity = torch.exp(torch.stack(nlls).sum() / end_loc)
    return perplexity.item()

def calculate_burstiness(text):
    words = text.split()
    word_counts = Counter(words)
    total_words = len(words)
    burstiness = sum((count / total_words) ** 2 for count in word_counts.values())
    return burstiness

# Function to detect plagiarism
def detect_plagiarism(input_text):
    vectorized_text = tfidf_vectorizer.transform([input_text])
    probabilities = model.predict_proba(vectorized_text)
    plagiarism_probability = probabilities[0][1]  # Probability of class 1 (Plagiarism)
    plagiarism_percentage = plagiarism_probability * 100
    
    return plagiarism_percentage

# Streamlit App
st.set_page_config(layout="wide")
st.title("PLAGY: AI Plagiarism Detector")
text_area = st.text_area("Enter text", "")

if text_area is not None:
    if st.button("Analyze"):
        col1, col2, col3 = st.columns([1,1,1])
        with col1:
            st.info("Your Input Text")
            st.success(text_area)
        
        with col2:
            st.info("Detection Score")
            perplexity = calculate_perplexity(text_area)
            burstiness_score = calculate_burstiness(text_area)

            st.write("Perplexity:", perplexity)
            st.write("Burstiness Score:", burstiness_score)

            if perplexity > 30000 and burstiness_score < 0.2:
                st.error("Text Analysis Result: AI generated content")
            else:
                st.success("Text Analysis Result: Likely not generated by AI")
        
        with col3:
            st.info("Plagiarism Detection")
            plagiarism_percentage = detect_plagiarism(text_area)
            st.write(f"Plagiarism Percentage: {plagiarism_percentage:.2f}%")